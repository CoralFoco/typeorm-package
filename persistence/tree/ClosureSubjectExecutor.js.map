{"version":3,"sources":["../../src/persistence/tree/ClosureSubjectExecutor.ts"],"names":[],"mappings":"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","file":"ClosureSubjectExecutor.js","sourcesContent":["import { Subject } from \"../Subject\";\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\";\nimport { CannotAttachTreeChildrenEntityError } from \"../../error/CannotAttachTreeChildrenEntityError\";\n\n/**\n * Executes subject operations for closure entities.\n */\nexport class ClosureSubjectExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Removes all children of the given subject's entity.\n\n    async deleteChildrenOf(subject: Subject) {\n        // const relationValue = subject.metadata.treeParentRelation.getEntityValue(subject.databaseEntity);\n        // console.log(\"relationValue: \", relationValue);\n        // this.queryRunner.manager\n        //     .createQueryBuilder()\n        //     .from(subject.metadata.closureJunctionTable.target, \"tree\")\n        //     .where(\"tree.\");\n    }*/\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject, userLogin: string): Promise<void> {\n        // create values to be inserted into the closure junction\n        const closureJunctionInsertMap: ObjectLiteral = {};\n        subject.metadata.closureJunctionTable.ancestorColumns.forEach(\n            column => {\n                closureJunctionInsertMap[column.databaseName] =\n                    subject.identifier;\n            }\n        );\n        subject.metadata.closureJunctionTable.descendantColumns.forEach(\n            column => {\n                closureJunctionInsertMap[column.databaseName] =\n                    subject.identifier;\n            }\n        );\n\n        // insert values into the closure junction table\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .insert()\n            .into(subject.metadata.closureJunctionTable.tablePath)\n            .values(closureJunctionInsertMap)\n            .updateEntity(false)\n            .callListeners(false)\n            .execute(userLogin);\n\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(\n            subject.entity!\n        ); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet\n                ? subject.parentSubject.insertedValueSet\n                : subject.parentSubject.entity;\n\n        if (parent) {\n            const escape = (alias: string) =>\n                this.queryRunner.connection.driver.escape(alias);\n            const tableName = this.getTableName(\n                subject.metadata.closureJunctionTable.tablePath\n            );\n            const ancestorColumnNames = subject.metadata.closureJunctionTable.ancestorColumns.map(\n                column => {\n                    return escape(column.databaseName);\n                }\n            );\n            const descendantColumnNames = subject.metadata.closureJunctionTable.descendantColumns.map(\n                column => {\n                    return escape(column.databaseName);\n                }\n            );\n            const firstQueryParameters: any[] = [];\n            const childEntityIdValues = subject.metadata.primaryColumns.map(\n                column => column.getEntityValue(subject.insertedValueSet!)\n            );\n            const childEntityIds1 = subject.metadata.primaryColumns.map(\n                (column, index) => {\n                    firstQueryParameters.push(childEntityIdValues[index]);\n                    return this.queryRunner.connection.driver.createParameter(\n                        \"child_entity_\" + column.databaseName,\n                        firstQueryParameters.length - 1\n                    );\n                }\n            );\n            const whereCondition = subject.metadata.primaryColumns\n                .map(column => {\n                    const columnName = escape(\n                        column.databaseName + \"_descendant\"\n                    );\n                    const parentId = column.getEntityValue(parent);\n                    if (!parentId)\n                        throw new CannotAttachTreeChildrenEntityError(\n                            subject.metadata.name\n                        );\n\n                    firstQueryParameters.push(parentId);\n                    const parameterName = this.queryRunner.connection.driver.createParameter(\n                        \"parent_entity_\" + column.databaseName,\n                        firstQueryParameters.length - 1\n                    );\n                    return columnName + \" = \" + parameterName;\n                })\n                .join(\", \");\n\n            await this.queryRunner.query(\n                `INSERT INTO ${tableName} (${[\n                    ...ancestorColumnNames,\n                    ...descendantColumnNames\n                ].join(\", \")}) ` +\n                    `SELECT ${ancestorColumnNames.join(\n                        \", \"\n                    )}, ${childEntityIds1.join(\n                        \", \"\n                    )} FROM ${tableName} WHERE ${whereCondition}`,\n                firstQueryParameters\n            );\n        }\n    }\n\n    /**\n     * Gets escaped table name with schema name if SqlServer or Postgres driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath\n            .split(\".\")\n            .map(i => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\") return i;\n                return this.queryRunner.connection.driver.escape(i);\n            })\n            .join(\".\");\n    }\n}\n"],"sourceRoot":"../.."}