{"version":3,"sources":["../../src/migration/MigrationExecutor.ts"],"names":[],"mappings":"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","file":"MigrationExecutor.js","sourcesContent":["import { Table } from \"../schema-builder/table/Table\";\nimport { Connection } from \"../connection/Connection\";\nimport { Migration } from \"./Migration\";\nimport { ObjectLiteral } from \"../common/ObjectLiteral\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\nimport { QueryRunner } from \"../query-runner/QueryRunner\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\";\nimport { SqlServerConnectionOptions } from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport { PostgresConnectionOptions } from \"../driver/postgres/PostgresConnectionOptions\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\";\n\n/**\n * Executes migrations: runs pending and reverts previously executed migrations.\n */\nexport class MigrationExecutor {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if migrations must be executed in a transaction.\n     */\n    transaction: boolean = true;\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private readonly migrationsTable: string;\n    private readonly migrationsTableName: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        protected connection: Connection,\n        protected queryRunner?: QueryRunner\n    ) {\n        const options = <\n            SqlServerConnectionOptions | PostgresConnectionOptions\n        >this.connection.driver.options;\n        this.migrationsTableName =\n            connection.options.migrationsTableName || \"migrations\";\n        this.migrationsTable = this.connection.driver.buildTableName(\n            this.migrationsTableName,\n            options.schema,\n            options.database\n        );\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Lists all migrations and whether they have been executed or not\n     * returns true if there are unapplied migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        let hasUnappliedMigrations = false;\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner(\"master\");\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(\n            queryRunner\n        );\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        for (const migration of allMigrations) {\n            const executedMigration = executedMigrations.find(\n                executedMigration => executedMigration.name === migration.name\n            );\n\n            if (executedMigration) {\n                this.connection.logger.logSchemaBuild(` [X] ${migration.name}`);\n            } else {\n                hasUnappliedMigrations = true;\n                this.connection.logger.logSchemaBuild(` [ ] ${migration.name}`);\n            }\n        }\n\n        // if query runner was created by us then release it\n        if (!this.queryRunner) {\n            await queryRunner.release();\n        }\n\n        return hasUnappliedMigrations;\n    }\n\n    /**\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\n     * thus not saved in the database.\n     */\n    async executePendingMigrations(): Promise<Migration[]> {\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner(\"master\");\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(\n            queryRunner\n        );\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestTimestampMigration(\n            executedMigrations\n        );\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // variable to store all migrations we did successefuly\n        const successMigrations: Migration[] = [];\n\n        // find all migrations that needs to be executed\n        const pendingMigrations = allMigrations.filter(migration => {\n            // check if we already have executed migration\n            const executedMigration = executedMigrations.find(\n                executedMigration => executedMigration.name === migration.name\n            );\n            if (executedMigration) return false;\n\n            // migration is new and not executed. now check if its timestamp is correct\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\n            //     throw new Error(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\n\n            // every check is passed means that migration was not run yet and we need to run it\n            return true;\n        });\n\n        // if no migrations are pending then nothing to do here\n        if (!pendingMigrations.length) {\n            this.connection.logger.logSchemaBuild(`No migrations are pending`);\n            // if query runner was created by us then release it\n            if (!this.queryRunner) await queryRunner.release();\n            return [];\n        }\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(\n            `${executedMigrations.length} migrations are already loaded in the database.`\n        );\n        this.connection.logger.logSchemaBuild(\n            `${allMigrations.length} migrations were found in the source code.`\n        );\n        if (lastTimeExecutedMigration)\n            this.connection.logger.logSchemaBuild(\n                `${\n                    lastTimeExecutedMigration.name\n                } is the last executed migration. It was executed on ${new Date(\n                    lastTimeExecutedMigration.timestamp\n                ).toString()}.`\n            );\n        this.connection.logger.logSchemaBuild(\n            `${pendingMigrations.length} migrations are new migrations that needs to be executed.`\n        );\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        // run all pending migrations in a sequence\n        try {\n            await PromiseUtils.runInSequence(pendingMigrations, migration => {\n                return migration\n                    .instance!.up(queryRunner)\n                    .then(() => {\n                        // now when migration is executed we need to insert record about it into the database\n                        return this.insertExecutedMigration(\n                            queryRunner,\n                            migration\n                        );\n                    })\n                    .then(() => {\n                        // informative log about migration success\n                        successMigrations.push(migration);\n                        this.connection.logger.logSchemaBuild(\n                            `Migration ${migration.name} has been executed successfully.`\n                        );\n                    });\n            });\n\n            // commit transaction if we started it\n            if (transactionStartedByUs) await queryRunner.commitTransaction();\n        } catch (err) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) {}\n            }\n\n            throw err;\n        } finally {\n            // if query runner was created by us then release it\n            if (!this.queryRunner) await queryRunner.release();\n        }\n        return successMigrations;\n    }\n\n    /**\n     * Reverts last migration that were run.\n     */\n    async undoLastMigration(): Promise<void> {\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner(\"master\");\n\n        // create migrations table if its not created yet\n        await this.createMigrationsTableIfNotExist(queryRunner);\n\n        // get all migrations that are executed and saved in the database\n        const executedMigrations = await this.loadExecutedMigrations(\n            queryRunner\n        );\n\n        // get the time when last migration was executed\n        let lastTimeExecutedMigration = this.getLatestExecutedMigration(\n            executedMigrations\n        );\n\n        // if no migrations found in the database then nothing to revert\n        if (!lastTimeExecutedMigration) {\n            this.connection.logger.logSchemaBuild(\n                `No migrations was found in the database. Nothing to revert!`\n            );\n            return;\n        }\n\n        // get all user's migrations in the source code\n        const allMigrations = this.getMigrations();\n\n        // find the instance of the migration we need to remove\n        const migrationToRevert = allMigrations.find(\n            migration => migration.name === lastTimeExecutedMigration!.name\n        );\n\n        // if no migrations found in the database then nothing to revert\n        if (!migrationToRevert)\n            throw new Error(\n                `No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`\n            );\n\n        // log information about migration execution\n        this.connection.logger.logSchemaBuild(\n            `${executedMigrations.length} migrations are already loaded in the database.`\n        );\n        this.connection.logger.logSchemaBuild(\n            `${\n                lastTimeExecutedMigration.name\n            } is the last executed migration. It was executed on ${new Date(\n                lastTimeExecutedMigration.timestamp\n            ).toString()}.`\n        );\n        this.connection.logger.logSchemaBuild(`Now reverting it...`);\n\n        // start transaction if its not started yet\n        let transactionStartedByUs = false;\n        if (this.transaction && !queryRunner.isTransactionActive) {\n            await queryRunner.startTransaction();\n            transactionStartedByUs = true;\n        }\n\n        try {\n            await migrationToRevert.instance!.down(queryRunner);\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert);\n            this.connection.logger.logSchemaBuild(\n                `Migration ${migrationToRevert.name} has been reverted successfully.`\n            );\n\n            // commit transaction if we started it\n            if (transactionStartedByUs) await queryRunner.commitTransaction();\n        } catch (err) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    // we throw original error even if rollback thrown an error\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) {}\n            }\n\n            throw err;\n        } finally {\n            // if query runner was created by us then release it\n            if (!this.queryRunner) await queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table \"migrations\" that will store information about executed migrations.\n     */\n    protected async createMigrationsTableIfNotExist(\n        queryRunner: QueryRunner\n    ): Promise<void> {\n        // If driver is mongo no need to create\n        if (this.connection.driver instanceof MongoDriver) {\n            return;\n        }\n        const tableExist = await queryRunner.hasTable(this.migrationsTable); // todo: table name should be configurable\n        if (!tableExist) {\n            await queryRunner.createTable(\n                new Table({\n                    name: this.migrationsTable,\n                    columns: [\n                        {\n                            name: \"id\",\n                            type: this.connection.driver.normalizeType({\n                                type: this.connection.driver.mappedDataTypes\n                                    .migrationId\n                            }),\n                            isGenerated: true,\n                            generationStrategy: \"increment\",\n                            isPrimary: true,\n                            isNullable: false\n                        },\n                        {\n                            name: \"timestamp\",\n                            type: this.connection.driver.normalizeType({\n                                type: this.connection.driver.mappedDataTypes\n                                    .migrationTimestamp\n                            }),\n                            isPrimary: false,\n                            isNullable: false\n                        },\n                        {\n                            name: \"name\",\n                            type: this.connection.driver.normalizeType({\n                                type: this.connection.driver.mappedDataTypes\n                                    .migrationName\n                            }),\n                            isNullable: false\n                        }\n                    ]\n                })\n            );\n        }\n    }\n\n    /**\n     * Loads all migrations that were executed and saved into the database.\n     */\n    protected async loadExecutedMigrations(\n        queryRunner: QueryRunner\n    ): Promise<Migration[]> {\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            return await mongoRunner.databaseConnection\n                .db(this.connection.driver.database!)\n                .collection(this.migrationsTableName)\n                .find()\n                .toArray();\n        } else {\n            const migrationsRaw: ObjectLiteral[] = await this.connection.manager\n                .createQueryBuilder(queryRunner)\n                .select()\n                .from(this.migrationsTable, this.migrationsTableName)\n                .getRawMany();\n            return migrationsRaw.map(migrationRaw => {\n                return new Migration(\n                    parseInt(migrationRaw[\"id\"]),\n                    parseInt(migrationRaw[\"timestamp\"]),\n                    migrationRaw[\"name\"]\n                );\n            });\n        }\n    }\n\n    /**\n     * Gets all migrations that setup for this connection.\n     */\n    protected getMigrations(): Migration[] {\n        const migrations = this.connection.migrations.map(migration => {\n            const migrationClassName = (migration.constructor as any).name;\n            const migrationTimestamp = parseInt(migrationClassName.substr(-13));\n            if (!migrationTimestamp)\n                throw new Error(\n                    `${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`\n                );\n\n            return new Migration(\n                undefined,\n                migrationTimestamp,\n                migrationClassName,\n                migration\n            );\n        });\n\n        // sort them by timestamp\n        return migrations.sort((a, b) => a.timestamp - b.timestamp);\n    }\n\n    /**\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\n     */\n    protected getLatestTimestampMigration(\n        migrations: Migration[]\n    ): Migration | undefined {\n        const sortedMigrations = migrations\n            .map(migration => migration)\n            .sort((a, b) => (a.timestamp - b.timestamp) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Finds the latest migration (sorts by id) in the given array of migrations.\n     */\n    protected getLatestExecutedMigration(\n        migrations: Migration[]\n    ): Migration | undefined {\n        const sortedMigrations = migrations\n            .map(migration => migration)\n            .sort((a, b) => ((a.id || 0) - (b.id || 0)) * -1);\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined;\n    }\n\n    /**\n     * Inserts new executed migration's data into migrations table.\n     */\n    protected async insertExecutedMigration(\n        queryRunner: QueryRunner,\n        migration: Migration\n    ): Promise<void> {\n        const values: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            values[\"timestamp\"] = new MssqlParameter(\n                migration.timestamp,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes\n                        .migrationTimestamp\n                }) as any\n            );\n            values[\"name\"] = new MssqlParameter(\n                migration.name,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes.migrationName\n                }) as any\n            );\n        } else {\n            values[\"timestamp\"] = migration.timestamp;\n            values[\"name\"] = migration.name;\n        }\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            mongoRunner.databaseConnection\n                .db(this.connection.driver.database!)\n                .collection(this.migrationsTableName)\n                .insert(values);\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb\n                .insert()\n                .into(this.migrationsTable)\n                .values(values)\n                .execute(\"\");\n        }\n    }\n\n    /**\n     * Delete previously executed migration's data from the migrations table.\n     */\n    protected async deleteExecutedMigration(\n        queryRunner: QueryRunner,\n        migration: Migration\n    ): Promise<void> {\n        const conditions: ObjectLiteral = {};\n        if (this.connection.driver instanceof SqlServerDriver) {\n            conditions[\"timestamp\"] = new MssqlParameter(\n                migration.timestamp,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes\n                        .migrationTimestamp\n                }) as any\n            );\n            conditions[\"name\"] = new MssqlParameter(\n                migration.name,\n                this.connection.driver.normalizeType({\n                    type: this.connection.driver.mappedDataTypes.migrationName\n                }) as any\n            );\n        } else {\n            conditions[\"timestamp\"] = migration.timestamp;\n            conditions[\"name\"] = migration.name;\n        }\n\n        if (this.connection.driver instanceof MongoDriver) {\n            const mongoRunner = queryRunner as MongoQueryRunner;\n            mongoRunner.databaseConnection\n                .db(this.connection.driver.database!)\n                .collection(this.migrationsTableName)\n                .deleteOne(conditions);\n        } else {\n            const qb = queryRunner.manager.createQueryBuilder();\n            await qb\n                .delete()\n                .from(this.migrationsTable)\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\n                .andWhere(`${qb.escape(\"name\")} = :name`)\n                .setParameters(conditions)\n                .execute(\"\");\n        }\n    }\n}\n"],"sourceRoot":".."}