{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { FindManyOptions } from \"../find-options/FindManyOptions\";\nimport { ObjectLiteral } from \"../common/ObjectLiteral\";\nimport { FindOneOptions } from \"../find-options/FindOneOptions\";\nimport { DeepPartial } from \"../common/DeepPartial\";\nimport { SaveOptions } from \"./SaveOptions\";\nimport { RemoveOptions } from \"./RemoveOptions\";\nimport { EntityManager } from \"../entity-manager/EntityManager\";\nimport { QueryRunner } from \"../query-runner/QueryRunner\";\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\";\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\";\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\";\nimport { InsertResult } from \"../query-builder/result/InsertResult\";\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\";\nimport { ObjectID } from \"../driver/mongodb/typings\";\nimport { FindConditions } from \"../find-options/FindConditions\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    readonly metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(\n        alias?: string,\n        queryRunner?: QueryRunner\n    ): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(\n            this.metadata.target as any,\n            alias || this.metadata.targetName,\n            queryRunner || this.queryRunner\n        );\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function | string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(\n        plainEntityLikeOrPlainEntityLikes?:\n            | DeepPartial<Entity>\n            | DeepPartial<Entity>[]\n    ): Entity | Entity[] {\n        return this.manager.create<any>(\n            this.metadata.target as any,\n            plainEntityLikeOrPlainEntityLikes as any\n        );\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        return this.manager.merge(\n            this.metadata.target as any,\n            mergeIntoEntity,\n            ...entityLikes\n        );\n    }\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false }\n    ): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions\n    ): Promise<(T & Entity)[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false }\n    ): Promise<T>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions\n    ): Promise<T & Entity>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions\n    ): Promise<T | T[]> {\n        return this.manager.save<T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options\n        );\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(\n        entityOrEntities: Entity | Entity[],\n        options?: RemoveOptions\n    ): Promise<Entity | Entity[]> {\n        return this.manager.remove(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options\n        );\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | (QueryDeepPartialEntity<Entity>[]),\n        userLogin: string\n    ): Promise<InsertResult> {\n        return this.manager.insert(\n            this.metadata.target as any,\n            entity,\n            userLogin\n        );\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | FindConditions<Entity>,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n        userLogin: string\n    ): Promise<UpdateResult> {\n        return this.manager.update(\n            this.metadata.target as any,\n            criteria as any,\n            partialEntity,\n            userLogin\n        );\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | FindConditions<Entity>,\n        userLogin: string\n    ): Promise<DeleteResult> {\n        return this.manager.delete(\n            this.metadata.target as any,\n            criteria as any,\n            userLogin\n        );\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count(conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count(\n        optionsOrConditions?: FindManyOptions<Entity> | FindConditions<Entity>\n    ): Promise<number> {\n        return this.manager.count(\n            this.metadata.target as any,\n            optionsOrConditions as any\n        );\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find(conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(\n        optionsOrConditions?: FindManyOptions<Entity> | FindConditions<Entity>\n    ): Promise<Entity[]> {\n        return this.manager.find(\n            this.metadata.target as any,\n            optionsOrConditions as any\n        );\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: FindManyOptions<Entity>\n    ): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        conditions?: FindConditions<Entity>\n    ): Promise<[Entity[], number]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        optionsOrConditions?: FindManyOptions<Entity> | FindConditions<Entity>\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(\n            this.metadata.target as any,\n            optionsOrConditions as any\n        );\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds(\n        ids: any[],\n        conditions?: FindConditions<Entity>\n    ): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(\n        ids: any[],\n        optionsOrConditions?: FindManyOptions<Entity> | FindConditions<Entity>\n    ): Promise<Entity[]> {\n        return this.manager.findByIds(\n            this.metadata.target as any,\n            ids,\n            optionsOrConditions as any\n        );\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(\n        id?: string | number | Date | ObjectID,\n        options?: FindOneOptions<Entity>\n    ): Promise<Entity | undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity | undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(\n        conditions?: FindConditions<Entity>,\n        options?: FindOneOptions<Entity>\n    ): Promise<Entity | undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(\n        optionsOrConditions?:\n            | string\n            | number\n            | Date\n            | ObjectID\n            | FindOneOptions<Entity>\n            | FindConditions<Entity>,\n        maybeOptions?: FindOneOptions<Entity>\n    ): Promise<Entity | undefined> {\n        return this.manager.findOne(\n            this.metadata.target as any,\n            optionsOrConditions as any,\n            maybeOptions\n        );\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(\n        id?: string | number | Date | ObjectID,\n        options?: FindOneOptions<Entity>\n    ): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(\n        conditions?: FindConditions<Entity>,\n        options?: FindOneOptions<Entity>\n    ): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(\n        optionsOrConditions?:\n            | string\n            | number\n            | Date\n            | ObjectID\n            | FindOneOptions<Entity>\n            | FindConditions<Entity>,\n        maybeOptions?: FindOneOptions<Entity>\n    ): Promise<Entity> {\n        return this.manager.findOneOrFail(\n            this.metadata.target as any,\n            optionsOrConditions as any,\n            maybeOptions\n        );\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target);\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(\n        conditions: FindConditions<Entity>,\n        propertyPath: string,\n        value: number | string,\n        userLogin: string\n    ): Promise<UpdateResult> {\n        return this.manager.increment(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n            userLogin\n        );\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(\n        conditions: FindConditions<Entity>,\n        propertyPath: string,\n        value: number | string,\n        userLogin: string\n    ): Promise<UpdateResult> {\n        return this.manager.decrement(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n            userLogin\n        );\n    }\n}\n"],"sourceRoot":".."}