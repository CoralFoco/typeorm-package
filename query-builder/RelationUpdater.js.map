{"version":3,"sources":["../../src/query-builder/RelationUpdater.ts"],"names":[],"mappings":"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","file":"RelationUpdater.js","sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\";\nimport { ObjectLiteral } from \"../common/ObjectLiteral\";\nimport { QueryExpressionMap } from \"./QueryExpressionMap\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationUpdater {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        protected queryBuilder: QueryBuilder<any>,\n        protected expressionMap: QueryExpressionMap\n    ) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs set or add operation on a relation.\n     */\n    async update(value: any | any[], userLogin: string): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\n            const updateSet = relation.joinColumns.reduce(\n                (updateSet, joinColumn) => {\n                    const relationValue =\n                        value instanceof Object\n                            ? joinColumn.referencedColumn!.getEntityValue(value)\n                            : value;\n                    joinColumn.setEntityValue(updateSet, relationValue);\n                    return updateSet;\n                },\n                {} as any\n            );\n\n            if (\n                !this.expressionMap.of ||\n                (this.expressionMap.of instanceof Array &&\n                    !this.expressionMap.of.length)\n            )\n                return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.entityMetadata.target)\n                .set(updateSet)\n                .whereInIds(this.expressionMap.of)\n                .execute(userLogin);\n        } else if (\n            (relation.isOneToOneNotOwner || relation.isOneToMany) &&\n            value === null\n        ) {\n            // we handle null a bit different way\n\n            const updateSet: ObjectLiteral = {};\n            relation.inverseRelation!.joinColumns.forEach(column => {\n                updateSet[column.propertyName] = null;\n            });\n\n            const ofs =\n                this.expressionMap.of instanceof Array\n                    ? this.expressionMap.of\n                    : [this.expressionMap.of];\n            const parameters: ObjectLiteral = {};\n            const conditions: string[] = [];\n            ofs.forEach((of, ofIndex) => {\n                relation.inverseRelation!.joinColumns.map(\n                    (column, columnIndex) => {\n                        const parameterName =\n                            \"joinColumn_\" + ofIndex + \"_\" + columnIndex;\n                        parameters[parameterName] =\n                            of instanceof Object\n                                ? column.referencedColumn!.getEntityValue(of)\n                                : of;\n                        conditions.push(\n                            `${column.propertyPath} = :${parameterName}`\n                        );\n                    }\n                );\n            });\n            const condition = conditions\n                .map(str => \"(\" + str + \")\")\n                .join(\" OR \");\n            if (!condition) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .where(condition)\n                .setParameters(parameters)\n                .execute(userLogin);\n        } else if (relation.isOneToOneNotOwner || relation.isOneToMany) {\n            if (this.expressionMap.of instanceof Array)\n                throw new Error(\n                    `You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`\n                );\n\n            const of = this.expressionMap.of;\n            const updateSet = relation.inverseRelation!.joinColumns.reduce(\n                (updateSet, joinColumn) => {\n                    const relationValue =\n                        of instanceof Object\n                            ? joinColumn.referencedColumn!.getEntityValue(of)\n                            : of;\n                    joinColumn.setEntityValue(updateSet, relationValue);\n                    return updateSet;\n                },\n                {} as any\n            );\n\n            if (!value || (value instanceof Array && !value.length)) return;\n\n            await this.queryBuilder\n                .createQueryBuilder()\n                .update(relation.inverseEntityMetadata.target)\n                .set(updateSet)\n                .whereInIds(value)\n                .execute(userLogin);\n        } else {\n            // many to many\n            const junctionMetadata = relation.junctionEntityMetadata!;\n            const ofs =\n                this.expressionMap.of instanceof Array\n                    ? this.expressionMap.of\n                    : [this.expressionMap.of];\n            const values = value instanceof Array ? value : [value];\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values;\n            const secondColumnValues = relation.isManyToManyOwner\n                ? values\n                : ofs;\n\n            const bulkInserted: ObjectLiteral[] = [];\n            firstColumnValues.forEach(firstColumnVal => {\n                secondColumnValues.forEach(secondColumnVal => {\n                    const inserted: ObjectLiteral = {};\n                    junctionMetadata.ownerColumns.forEach(column => {\n                        inserted[column.databaseName] =\n                            firstColumnVal instanceof Object\n                                ? column.referencedColumn!.getEntityValue(\n                                      firstColumnVal\n                                  )\n                                : firstColumnVal;\n                    });\n                    junctionMetadata.inverseColumns.forEach(column => {\n                        inserted[column.databaseName] =\n                            secondColumnVal instanceof Object\n                                ? column.referencedColumn!.getEntityValue(\n                                      secondColumnVal\n                                  )\n                                : secondColumnVal;\n                    });\n                    bulkInserted.push(inserted);\n                });\n            });\n\n            if (!bulkInserted.length) return;\n\n            if (this.queryBuilder.connection.driver instanceof OracleDriver) {\n                await Promise.all(\n                    bulkInserted.map(value => {\n                        return this.queryBuilder\n                            .createQueryBuilder()\n                            .insert()\n                            .into(junctionMetadata.tableName)\n                            .values(value)\n                            .execute(userLogin);\n                    })\n                );\n            } else {\n                await this.queryBuilder\n                    .createQueryBuilder()\n                    .insert()\n                    .into(junctionMetadata.tableName)\n                    .values(bulkInserted)\n                    .execute(userLogin);\n            }\n        }\n    }\n}\n"],"sourceRoot":".."}