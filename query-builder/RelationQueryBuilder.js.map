{"version":3,"sources":["../../src/query-builder/RelationQueryBuilder.ts"],"names":[],"mappings":"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","file":"RelationQueryBuilder.js","sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\";\nimport { RelationUpdater } from \"./RelationUpdater\";\nimport { RelationRemover } from \"./RelationRemover\";\n\n/**\n * Allows to work with entity relations and perform specific operations with those relations.\n *\n * todo: add transactions everywhere\n */\nexport class RelationQueryBuilder<Entity> extends QueryBuilder<Entity> {\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        return \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sets entity (target) which relations will be updated.\n     */\n    of(entity: any | any[]): this {\n        this.expressionMap.of = entity;\n        return this;\n    }\n\n    /**\n     * Sets entity relation's value.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Works only for many-to-one and one-to-one relations.\n     * For many-to-many and one-to-many relations use #add and #remove methods instead.\n     */\n    async set(value: any, userLogin: string): Promise<void> {\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of)\n            // todo: move this check before relation query builder creation?\n            throw new Error(\n                `Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`\n            );\n\n        if (relation.isManyToMany || relation.isOneToMany)\n            throw new Error(\n                `Set operation is only supported for many-to-one and one-to-one relations. ` +\n                    `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                    `Use .add() method instead.`\n            );\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (\n            relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) ||\n                Object.keys(value).length < relation.joinColumns.length)\n        )\n            throw new Error(\n                `Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`\n            );\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value, userLogin);\n    }\n\n    /**\n     * Adds (binds) given value to entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async add(value: any | any[], userLogin: string): Promise<void> {\n        if (value instanceof Array && value.length === 0) return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of)\n            // todo: move this check before relation query builder creation?\n            throw new Error(\n                `Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`\n            );\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(\n                `Add operation is only supported for many-to-many and one-to-many relations. ` +\n                    `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                    `Use .set() method instead.`\n            );\n\n        // if there are multiple join columns then user must send id map as \"value\" argument. check if he really did it\n        if (\n            relation.joinColumns &&\n            relation.joinColumns.length > 1 &&\n            (!(value instanceof Object) ||\n                Object.keys(value).length < relation.joinColumns.length)\n        )\n            throw new Error(\n                `Value to be set into the relation must be a map of relation ids, for example: .set({ firstName: \"...\", lastName: \"...\" })`\n            );\n\n        const updater = new RelationUpdater(this, this.expressionMap);\n        return updater.update(value, userLogin);\n    }\n\n    /**\n     * Removes (unbinds) given value from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async remove(value: any | any[], userLogin: string): Promise<void> {\n        if (value instanceof Array && value.length === 0) return;\n\n        const relation = this.expressionMap.relationMetadata;\n\n        if (!this.expressionMap.of)\n            // todo: move this check before relation query builder creation?\n            throw new Error(\n                `Entity whose relation needs to be set is not set. Use .of method to define whose relation you want to set.`\n            );\n\n        if (relation.isManyToOne || relation.isOneToOne)\n            throw new Error(\n                `Add operation is only supported for many-to-many and one-to-many relations. ` +\n                    `However given \"${relation.propertyPath}\" has ${relation.relationType} relation. ` +\n                    `Use .set(null) method instead.`\n            );\n\n        const remover = new RelationRemover(this, this.expressionMap);\n        return remover.remove(value, userLogin);\n    }\n\n    /**\n     * Adds (binds) and removes (unbinds) given values to/from entity relation.\n     * Value can be entity, entity id or entity id map (if entity has composite ids).\n     * Value also can be array of entities, array of entity ids or array of entity id maps (if entity has composite ids).\n     * Works only for many-to-many and one-to-many relations.\n     * For many-to-one and one-to-one use #set method instead.\n     */\n    async addAndRemove(\n        added: any | any[],\n        removed: any | any[],\n        userLogin: string\n    ): Promise<void> {\n        await this.remove(removed, userLogin);\n        await this.add(added, userLogin);\n    }\n\n    /**\n     * Gets entity's relation id.\n    async getId(): Promise<any> {\n\n    }*/\n\n    /**\n     * Gets entity's relation ids.\n    async getIds(): Promise<any[]> {\n        return [];\n    }*/\n\n    /**\n     * Loads a single entity (relational) from the relation.\n     * You can also provide id of relational entity to filter by.\n     */\n    async loadOne<T = any>(): Promise<T | undefined> {\n        return this.loadMany<T>().then(results => results[0]);\n    }\n\n    /**\n     * Loads many entities (relational) from the relation.\n     * You can also provide ids of relational entities to filter by.\n     */\n    async loadMany<T = any>(): Promise<T[]> {\n        let of = this.expressionMap.of;\n        if (!(of instanceof Object)) {\n            const metadata = this.expressionMap.mainAlias!.metadata;\n            if (metadata.hasMultiplePrimaryKeys)\n                throw new Error(\n                    `Cannot load entity because only one primary key was specified, however entity contains multiple primary keys`\n                );\n\n            of = metadata.primaryColumns[0].createValueMap(of);\n        }\n\n        return this.connection.relationLoader.load(\n            this.expressionMap.relationMetadata,\n            of\n        );\n    }\n}\n"],"sourceRoot":".."}