{"version":3,"sources":["../browser/src/query-builder/UpdateQueryBuilder.ts"],"names":[],"mappings":"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","file":"UpdateQueryBuilder.js","sourcesContent":["import { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { ObjectLiteral } from \"../common/ObjectLiteral\";\nimport { Connection } from \"../connection/Connection\";\nimport { QueryRunner } from \"../query-runner/QueryRunner\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { WhereExpression } from \"./WhereExpression\";\nimport { Brackets } from \"./Brackets\";\nimport { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { AbstractSqliteDriver } from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport { OrderByCondition } from \"../find-options/OrderByCondition\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { EntityColumnNotFound } from \"../error/EntityColumnNotFound\";\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class UpdateQueryBuilder<Entity> extends QueryBuilder<Entity>\n    implements WhereExpression {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        connectionOrQueryBuilder: Connection | QueryBuilder<any>,\n        queryRunner?: QueryRunner\n    ) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(userLogin: string): Promise<UpdateResult> {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n            // start transaction if it was enabled\n            if (\n                this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false\n            ) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before updation methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeUpdateEvent(\n                    broadcastResult,\n                    this.expressionMap.mainAlias!.metadata,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    userLogin\n                );\n                if (broadcastResult.promises.length > 0)\n                    await Promise.all(broadcastResult.promises);\n            }\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(\n                queryRunner,\n                this.expressionMap\n            );\n            if (\n                this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0\n            ) {\n                this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n            }\n\n            // execute update query\n            const [sql, parameters] = this.getQueryAndParameters();\n            const updateResult = new UpdateResult();\n            const result = await queryRunner.query(sql, parameters);\n\n            const driver = queryRunner.connection.driver;\n            if (driver instanceof PostgresDriver) {\n                updateResult.raw = result[0];\n                updateResult.affected = result[1];\n            } else {\n                updateResult.raw = result;\n            }\n\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (\n                this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0\n            ) {\n                await returningResultsEntityUpdator.update(\n                    updateResult,\n                    this.expressionMap.whereEntities\n                );\n            }\n\n            // call after updation methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterUpdateEvent(\n                    broadcastResult,\n                    this.expressionMap.mainAlias!.metadata,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    userLogin\n                );\n                if (broadcastResult.promises.length > 0)\n                    await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs) await queryRunner.commitTransaction();\n\n            return updateResult;\n        } catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) {}\n            }\n            throw error;\n        } finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (\n                this.connection.driver instanceof SqljsDriver &&\n                !queryRunner.isTransactionActive\n            ) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Values needs to be updated.\n     */\n    set(values: QueryDeepPartialEntity<Entity>): this {\n        this.expressionMap.valuesSet = values;\n        return this;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(\n        where:\n            | string\n            | ((qb: this) => string)\n            | Brackets\n            | ObjectLiteral\n            | ObjectLiteral[],\n        parameters?: ObjectLiteral\n    ): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition }\n            ];\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(\n        where: string | ((qb: this) => string) | Brackets,\n        parameters?: ObjectLiteral\n    ): this {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.computeWhereParameter(where)\n        });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(\n        where: string | ((qb: this) => string) | Brackets,\n        parameters?: ObjectLiteral\n    ): this {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.computeWhereParameter(where)\n        });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any | any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any | any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any | any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(\n        sort: string,\n        order?: \"ASC\" | \"DESC\",\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\"\n    ): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(\n        sort?: string | OrderByCondition,\n        order: \"ASC\" | \"DESC\" = \"ASC\",\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\"\n    ): this {\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                if (nulls) {\n                    this.expressionMap.orderBys = {\n                        [sort as string]: { order, nulls }\n                    };\n                } else {\n                    this.expressionMap.orderBys = { [sort as string]: order };\n                }\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(\n        sort: string,\n        order: \"ASC\" | \"DESC\" = \"ASC\",\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\"\n    ): this {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        } else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity: Entity | Entity[]): this {\n        if (!this.expressionMap.mainAlias!.hasMetadata)\n            throw new Error(\n                `.whereEntity method can only be used on queries which update real entity table.`\n            );\n\n        this.expressionMap.wheres = [];\n        const entities: Entity[] = entity instanceof Array ? entity : [entity];\n        entities.forEach(entity => {\n            const entityIdMap = this.expressionMap.mainAlias!.metadata.getEntityIdMap(\n                entity\n            );\n            if (!entityIdMap)\n                throw new Error(\n                    `Provided entity does not have ids set, cannot perform operation.`\n                );\n\n            this.orWhereInIds(entityIdMap);\n        });\n\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    protected createUpdateExpression() {\n        const valuesSet = this.getValueSet();\n        const metadata = this.expressionMap.mainAlias!.hasMetadata\n            ? this.expressionMap.mainAlias!.metadata\n            : undefined;\n\n        // prepare columns and values to be updated\n        const updateColumnAndValues: string[] = [];\n        const newParameters: ObjectLiteral = {};\n        let parametersCount =\n            this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver\n                ? 0\n                : Object.keys(this.expressionMap.nativeParameters).length;\n        if (metadata) {\n            EntityMetadata.createPropertyPath(metadata, valuesSet).forEach(\n                propertyPath => {\n                    // todo: make this and other query builder to work with properly with tables without metadata\n                    const columns = metadata.findColumnsWithPropertyPath(\n                        propertyPath\n                    );\n\n                    if (columns.length <= 0) {\n                        throw new EntityColumnNotFound(propertyPath);\n                    }\n\n                    columns.forEach(column => {\n                        if (!column.isUpdate) {\n                            return;\n                        }\n\n                        const paramName = \"upd_\" + column.databaseName;\n\n                        //\n                        let value = column.getEntityValue(valuesSet);\n                        if (\n                            column.referencedColumn &&\n                            value instanceof Object\n                        ) {\n                            value = column.referencedColumn.getEntityValue(\n                                value\n                            );\n                        } else if (!(value instanceof Function)) {\n                            value = this.connection.driver.preparePersistentValue(\n                                value,\n                                column\n                            );\n                        }\n\n                        // todo: duplication zone\n                        if (value instanceof Function) {\n                            // support for SQL expressions in update query\n                            updateColumnAndValues.push(\n                                this.escape(column.databaseName) +\n                                    \" = \" +\n                                    value()\n                            );\n                        } else {\n                            if (\n                                this.connection.driver instanceof\n                                SqlServerDriver\n                            ) {\n                                value = this.connection.driver.parametrizeValue(\n                                    column,\n                                    value\n                                );\n\n                                // } else if (value instanceof Array) {\n                                //     value = new ArrayParameter(value);\n                            }\n\n                            if (\n                                this.connection.driver instanceof MysqlDriver ||\n                                this.connection.driver instanceof\n                                    OracleDriver ||\n                                this.connection.driver instanceof\n                                    AbstractSqliteDriver\n                            ) {\n                                newParameters[paramName] = value;\n                            } else {\n                                this.expressionMap.nativeParameters[\n                                    paramName\n                                ] = value;\n                            }\n\n                            let expression = null;\n                            if (\n                                this.connection.driver instanceof MysqlDriver &&\n                                this.connection.driver.spatialTypes.indexOf(\n                                    column.type\n                                ) !== -1\n                            ) {\n                                expression = `GeomFromText(${this.connection.driver.createParameter(\n                                    paramName,\n                                    parametersCount\n                                )})`;\n                            } else if (\n                                this.connection.driver instanceof\n                                    PostgresDriver &&\n                                this.connection.driver.spatialTypes.indexOf(\n                                    column.type\n                                ) !== -1\n                            ) {\n                                if (column.srid != null) {\n                                    expression = `ST_SetSRID(ST_GeomFromGeoJSON(${this.connection.driver.createParameter(\n                                        paramName,\n                                        parametersCount\n                                    )}), ${column.srid})::${column.type}`;\n                                } else {\n                                    expression = `ST_GeomFromGeoJSON(${this.connection.driver.createParameter(\n                                        paramName,\n                                        parametersCount\n                                    )})::${column.type}`;\n                                }\n                            } else {\n                                expression = this.connection.driver.createParameter(\n                                    paramName,\n                                    parametersCount\n                                );\n                            }\n                            updateColumnAndValues.push(\n                                this.escape(column.databaseName) +\n                                    \" = \" +\n                                    expression\n                            );\n                            parametersCount++;\n                        }\n                    });\n                }\n            );\n\n            if (metadata.versionColumn)\n                updateColumnAndValues.push(\n                    this.escape(metadata.versionColumn.databaseName) +\n                        \" = \" +\n                        this.escape(metadata.versionColumn.databaseName) +\n                        \" + 1\"\n                );\n            if (metadata.updateDateColumn)\n                updateColumnAndValues.push(\n                    this.escape(metadata.updateDateColumn.databaseName) +\n                        \" = CURRENT_TIMESTAMP\"\n                ); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n        } else {\n            Object.keys(valuesSet).map(key => {\n                let value = valuesSet[key];\n\n                // todo: duplication zone\n                if (value instanceof Function) {\n                    // support for SQL expressions in update query\n                    updateColumnAndValues.push(\n                        this.escape(key) + \" = \" + value()\n                    );\n                } else {\n                    // we need to store array values in a special class to make sure parameter replacement will work correctly\n                    // if (value instanceof Array)\n                    //     value = new ArrayParameter(value);\n\n                    if (\n                        this.connection.driver instanceof MysqlDriver ||\n                        this.connection.driver instanceof OracleDriver ||\n                        this.connection.driver instanceof AbstractSqliteDriver\n                    ) {\n                        newParameters[key] = value;\n                    } else {\n                        this.expressionMap.nativeParameters[key] = value;\n                    }\n\n                    updateColumnAndValues.push(\n                        this.escape(key) +\n                            \" = \" +\n                            this.connection.driver.createParameter(\n                                key,\n                                parametersCount\n                            )\n                    );\n                    parametersCount++;\n                }\n            });\n        }\n\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n        // because some drivers like mysql depend on order of parameters\n        if (\n            this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver\n        ) {\n            this.expressionMap.nativeParameters = Object.assign(\n                newParameters,\n                this.expressionMap.nativeParameters\n            );\n        }\n\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        // generate and return sql update query\n        if (\n            returningExpression &&\n            (this.connection.driver instanceof PostgresDriver ||\n                this.connection.driver instanceof OracleDriver ||\n                this.connection.driver instanceof CockroachDriver)\n        ) {\n            return `UPDATE ${this.getTableName(\n                this.getMainTableName()\n            )} SET ${updateColumnAndValues.join(\n                \", \"\n            )}${whereExpression} RETURNING ${returningExpression}`;\n        } else if (\n            returningExpression &&\n            this.connection.driver instanceof SqlServerDriver\n        ) {\n            return `UPDATE ${this.getTableName(\n                this.getMainTableName()\n            )} SET ${updateColumnAndValues.join(\n                \", \"\n            )} OUTPUT ${returningExpression}${whereExpression}`;\n        } else {\n            return `UPDATE ${this.getTableName(\n                this.getMainTableName()\n            )} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return (\n                \" ORDER BY \" +\n                Object.keys(orderBys)\n                    .map(columnName => {\n                        if (typeof orderBys[columnName] === \"string\") {\n                            return (\n                                this.replacePropertyNames(columnName) +\n                                \" \" +\n                                orderBys[columnName]\n                            );\n                        } else {\n                            return (\n                                this.replacePropertyNames(columnName) +\n                                \" \" +\n                                (orderBys[columnName] as any).order +\n                                \" \" +\n                                (orderBys[columnName] as any).nulls\n                            );\n                        }\n                    })\n                    .join(\", \")\n            );\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    protected createLimitExpression(): string {\n        let limit: number | undefined = this.expressionMap.limit;\n\n        if (limit) {\n            if (this.connection.driver instanceof MysqlDriver) {\n                return \" LIMIT \" + limit;\n            } else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Gets array of values need to be inserted into the target table.\n     */\n    protected getValueSet(): ObjectLiteral {\n        if (this.expressionMap.valuesSet instanceof Object)\n            return this.expressionMap.valuesSet;\n\n        throw new UpdateValuesMissingError();\n    }\n}\n"],"sourceRoot":".."}