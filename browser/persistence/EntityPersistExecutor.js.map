{"version":3,"sources":["../browser/src/persistence/EntityPersistExecutor.ts"],"names":[],"mappings":"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","file":"EntityPersistExecutor.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\";\nimport { SaveOptions } from \"../repository/SaveOptions\";\nimport { RemoveOptions } from \"../repository/RemoveOptions\";\nimport { MustBeEntityError } from \"../error/MustBeEntityError\";\nimport { SubjectExecutor } from \"./SubjectExecutor\";\nimport { CannotDetermineEntityError } from \"../error/CannotDetermineEntityError\";\nimport { QueryRunner } from \"../query-runner/QueryRunner\";\nimport { Connection } from \"../connection/Connection\";\nimport { Subject } from \"./Subject\";\nimport { OneToManySubjectBuilder } from \"./subject-builder/OneToManySubjectBuilder\";\nimport { OneToOneInverseSideSubjectBuilder } from \"./subject-builder/OneToOneInverseSideSubjectBuilder\";\nimport { ManyToManySubjectBuilder } from \"./subject-builder/ManyToManySubjectBuilder\";\nimport { SubjectDatabaseEntityLoader } from \"./SubjectDatabaseEntityLoader\";\nimport { CascadesSubjectBuilder } from \"./subject-builder/CascadesSubjectBuilder\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { PromiseUtils } from \"../util/PromiseUtils\";\n\n/**\n * Persists a single entity or multiple entities - saves or removes them.\n */\nexport class EntityPersistExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        protected connection: Connection,\n        protected queryRunner: QueryRunner | undefined,\n        protected mode: \"save\" | \"remove\",\n        protected target: Function | string | undefined,\n        protected entity: ObjectLiteral | ObjectLiteral[],\n        protected options?: SaveOptions & RemoveOptions\n    ) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes persistence operation ob given entity or entities.\n     */\n    execute(userLogin: string): Promise<void> {\n        // check if entity we are going to save is valid and is an object\n        if (!this.entity || !(this.entity instanceof Object))\n            return Promise.reject(\n                new MustBeEntityError(this.mode, this.entity)\n            );\n\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\n        return Promise.resolve().then(async () => {\n            // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n            // if its not defined we create a new query runner - single connection where we'll execute all our operations\n            const queryRunner =\n                this.queryRunner || this.connection.createQueryRunner(\"master\");\n\n            // save data in the query runner - this is useful functionality to share data from outside of the world\n            // with third classes - like subscribers and listener methods\n            if (this.options && this.options.data)\n                queryRunner.data = this.options.data;\n\n            try {\n                // collect all operate subjects\n                const entities: ObjectLiteral[] =\n                    this.entity instanceof Array ? this.entity : [this.entity];\n                const entitiesInChunks =\n                    this.options && this.options.chunk && this.options.chunk > 0\n                        ? OrmUtils.chunk(entities, this.options.chunk)\n                        : [entities];\n\n                // console.time(\"building subject executors...\");\n                const executors = await Promise.all(\n                    entitiesInChunks.map(async entities => {\n                        const subjects: Subject[] = [];\n\n                        // create subjects for all entities we received for the persistence\n                        entities.forEach(entity => {\n                            const entityTarget = this.target\n                                ? this.target\n                                : entity.constructor;\n                            if (entityTarget === Object)\n                                throw new CannotDetermineEntityError(this.mode);\n\n                            subjects.push(\n                                new Subject({\n                                    metadata: this.connection.getMetadata(\n                                        entityTarget\n                                    ),\n                                    entity: entity,\n                                    canBeInserted: this.mode === \"save\",\n                                    canBeUpdated: this.mode === \"save\",\n                                    mustBeRemoved: this.mode === \"remove\"\n                                })\n                            );\n                        });\n\n                        // console.time(\"building cascades...\");\n                        // go through each entity with metadata and create subjects and subjects by cascades for them\n                        const cascadesSubjectBuilder = new CascadesSubjectBuilder(\n                            subjects\n                        );\n                        subjects.forEach(subject => {\n                            // next step we build list of subjects we will operate with\n                            // these subjects are subjects that we need to insert or update alongside with main persisted entity\n                            cascadesSubjectBuilder.build(subject);\n                        });\n                        // console.timeEnd(\"building cascades...\");\n\n                        // load database entities for all subjects we have\n                        // next step is to load database entities for all operate subjects\n                        // console.time(\"loading...\");\n                        await new SubjectDatabaseEntityLoader(\n                            queryRunner,\n                            subjects\n                        ).load(this.mode);\n                        // console.timeEnd(\"loading...\");\n\n                        // console.time(\"other subjects...\");\n                        // build all related subjects and change maps\n                        if (this.mode === \"save\") {\n                            new OneToManySubjectBuilder(subjects).build();\n                            new OneToOneInverseSideSubjectBuilder(\n                                subjects\n                            ).build();\n                            new ManyToManySubjectBuilder(subjects).build();\n                        } else {\n                            subjects.forEach(subject => {\n                                if (subject.mustBeRemoved) {\n                                    new ManyToManySubjectBuilder(\n                                        subjects\n                                    ).buildForAllRemoval(subject);\n                                }\n                            });\n                        }\n                        // console.timeEnd(\"other subjects...\");\n                        // console.timeEnd(\"building subjects...\");\n                        // console.log(\"subjects\", subjects);\n\n                        // create a subject executor\n                        return new SubjectExecutor(\n                            queryRunner,\n                            subjects,\n                            this.options\n                        );\n                    })\n                );\n                // console.timeEnd(\"building subject executors...\");\n\n                // make sure we have at least one executable operation before we create a transaction and proceed\n                // if we don't have operations it means we don't really need to update or remove something\n                const executorsWithExecutableOperations = executors.filter(\n                    executor => executor.hasExecutableOperations\n                );\n                if (executorsWithExecutableOperations.length === 0) return;\n\n                // start execute queries in a transaction\n                // if transaction is already opened in this query runner then we don't touch it\n                // if its not opened yet then we open it here, and once we finish - we close it\n                let isTransactionStartedByUs = false;\n                try {\n                    // open transaction if its not opened yet\n                    if (!queryRunner.isTransactionActive) {\n                        if (\n                            !this.options ||\n                            this.options.transaction !== false\n                        ) {\n                            // start transaction until it was not explicitly disabled\n                            isTransactionStartedByUs = true;\n                            await queryRunner.startTransaction();\n                        }\n                    }\n\n                    // execute all persistence operations for all entities we have\n                    // console.time(\"executing subject executors...\");\n                    await PromiseUtils.runInSequence(\n                        executorsWithExecutableOperations,\n                        executor => executor.execute(userLogin)\n                    );\n                    // console.timeEnd(\"executing subject executors...\");\n\n                    // commit transaction if it was started by us\n                    // console.time(\"commit\");\n                    if (isTransactionStartedByUs === true)\n                        await queryRunner.commitTransaction();\n                    // console.timeEnd(\"commit\");\n                } catch (error) {\n                    // rollback transaction if it was started by us\n                    if (isTransactionStartedByUs) {\n                        try {\n                            await queryRunner.rollbackTransaction();\n                        } catch (rollbackError) {}\n                    }\n                    throw error;\n                }\n            } finally {\n                // release query runner only if its created by us\n                if (!this.queryRunner) await queryRunner.release();\n            }\n        });\n    }\n}\n"],"sourceRoot":".."}