{"version":3,"sources":["../browser/src/persistence/tree/MaterializedPathSubjectExecutor.ts"],"names":[],"mappings":";AAGA;;GAEG;AACH;IACI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,yCAAsB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAElD,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACG,gDAAM,GAAZ,UAAa,OAAgB,EAAE,SAAiB;;;;;;wBACxC,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,kBAAmB,CAAC,cAAc,CAC5D,OAAO,CAAC,MAAO,CAClB,CAAC;wBACF,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,aAAa,CAAC,MAAM;4BAChE,sCAAsC;4BACtC,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,gBAAgB;gCAC3C,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,gBAAgB;gCACxC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC;wBAEjC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;wBAErD,UAAU,GAAW,EAAE,CAAC;6BACxB,QAAQ,EAAR,wBAAQ;wBACK,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO;iCACtC,kBAAkB,EAAE;iCACpB,MAAM,CACH,OAAO,CAAC,QAAQ,CAAC,UAAU;gCACvB,GAAG;gCACH,OAAO,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAY,EACzD,MAAM,CACT;iCACA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;iCAC1D,UAAU,CAAC,QAAQ,CAAC;iCACpB,SAAS,EAAE;iCACX,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAArC,CAAqC,CAAC,EAAA;;wBAX1D,UAAU,GAAG,SAW6C,CAAC;;;wBAGzD,gBAAgB,GAAG,OAAO,CAAC,QAAQ;6BACpC,kBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU;4BAC3C,OAAO,UAAU,CAAC,gBAAiB,CAAC,cAAc,CAC9C,OAAO,CAAC,gBAAiB,CAC5B,CAAC;wBACN,CAAC,CAAC;6BACD,IAAI,CAAC,GAAG,CAAC,CAAC;wBAEf,qBAAM,IAAI,CAAC,WAAW,CAAC,OAAO;iCACzB,kBAAkB,EAAE;iCACpB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;iCAC/B,GAAG,CAAC,CAAA;gCACD,GAAC,OAAO,CAAC,QAAQ,CAAC,sBAAuB,CAAC,YAAY,IAClD,UAAU,GAAG,gBAAgB,GAAG,GAAG;kCACnC,CAAA,CAAC;iCACR,KAAK,CAAC,OAAO,CAAC,UAAW,CAAC;iCAC1B,OAAO,CAAC,SAAS,CAAC,EAAA;;wBARvB,SAQuB,CAAC;;;;;KAC3B;IACL,sCAAC;AAAD,CA5DA,AA4DC,IAAA","file":"MaterializedPathSubjectExecutor.js","sourcesContent":["import { Subject } from \"../Subject\";\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\n\n/**\n * Executes subject operations for materialized-path tree entities.\n */\nexport class MaterializedPathSubjectExecutor {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject, userLogin: string): Promise<void> {\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(\n            subject.entity!\n        ); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity)\n            // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet\n                ? subject.parentSubject.insertedValueSet\n                : subject.parentSubject.entity;\n\n        const parentId = subject.metadata.getEntityIdMap(parent);\n\n        let parentPath: string = \"\";\n        if (parentId) {\n            parentPath = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(\n                    subject.metadata.targetName +\n                        \".\" +\n                        subject.metadata.materializedPathColumn!.propertyPath,\n                    \"path\"\n                )\n                .from(subject.metadata.target, subject.metadata.targetName)\n                .whereInIds(parentId)\n                .getRawOne()\n                .then(result => (result ? result[\"path\"] : undefined));\n        }\n\n        const insertedEntityId = subject.metadata\n            .treeParentRelation!.joinColumns.map(joinColumn => {\n                return joinColumn.referencedColumn!.getEntityValue(\n                    subject.insertedValueSet!\n                );\n            })\n            .join(\"_\");\n\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .update(subject.metadata.target)\n            .set({\n                [subject.metadata.materializedPathColumn!.propertyPath]:\n                    parentPath + insertedEntityId + \".\"\n            } as any)\n            .where(subject.identifier!)\n            .execute(userLogin);\n    }\n}\n"],"sourceRoot":"../.."}